%**************************************************************************
% MODAL ANALYSIS OF LINEAR ORR-SOMMERFELD OPERATOR FOR BOUNDARY LAYERS
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%
% Code Written by:  UTSAV JAIN
% Last Modified:    NOVEMBER 2019
% Course:           ME 59700
% Instructor:       DR. CARLO SCALO
%
% Assumptions:
% ~~~~~~~~~~~~
% -- The gradients in the stream-wise direction are neglected
% -- Only the base velocity only has a gradient in the span-wise direction
% -- Incompressible flow with constant density
% -- beta (wave number in z direction) assumed to be 0
% -- The code can only solve for boundary layer or channel flow
%
% Solution format:
% ~~~~~~~~~~~~~~~~
%
%**************************************************************************

% Clearing screens, variables and figures...
clc; clearvars; close all; warning('off'); format long G;

%--------------------------------------------------------------------------
% TESTING POLYNOMIAL BASES...
%--------------------------------------------------------------------------

% Laguerre Polynomial...
laguerrePol = makeLaguerrePol(5,-5:0.01:30);

% Laguerre Function...
laguerreFunc = makeLaguerreFunc(laguerrePol,-5:0.01:30);

% Transformed Laguerre Function...
transLaguerreFunc = makeTransformedLaguerreFunc(laguerreFunc);

% Plotting polynomial basis...
figure; 
    subplot(1,2,1); 
        plotLaguerrePol(laguerrePol,-5:0.01:30);
    subplot(1,2,2); 
        plotLaguerreFunc(laguerreFunc,-5:0.01:30);
figure; 
    subplot(1,2,1); 
        plotLaguerreFunc(laguerreFunc,-5:0.01:30);
    subplot(1,2,2); 
        plotLaguerreFuncTrans(transLaguerreFunc,-5:0.01:30);
        
% Chebyshev polynomial...
chebyPol = makeChebyPol(5,-1:0.001:1);

% Plotting polynomials basis...
plotChebyPol(chebyPol,-1:0.001:1);

clearvars laguerrePol laguerreFunc transLaguerreFunc chebyPol;

%--------------------------------------------------------------------------
% ORR-SOMMERFELD OPERATOR...
%--------------------------------------------------------------------------

% Making case number matrix...
ReNum    = [100];
waven    = [10.0];
testCase = 1;                         % 1: Boundary Layer
                                      % 2: Channel Flow

% Iterating over different test cases...
for iRe = 1 : size(ReNum,1)
    
for ik = 1 : size(waven,1)
    
% Print case number...
fprintf('Case %d out of %d!\n',(iRe-1)*size(ReNum,1)+ik,size(ReNum,1)*...
    size(waven,1));

% Orr-Sommerfeld Input...
order          = 32;             % degree of freedom...
scalF          = 1.0;            % scaling factor for gauss quadrature...
k              = waven(ik,1);    % spatial wave number...
Re             = ReNum(iRe,1);   % Reynolds Number...
noslip         = 0;              % No slip BC; 1: Yes 0: No...

if( testCase == 1)  
% Incompressible Boundary Layer... (using Laguerre basis)
%--------------------------------------------------------------------------   

% Laguerre-Gauss Quadrature Nodes...
laguerreGQNodes = abs(makeLaguerreGQNodes(order));

% Scaling the Laguerre-Gauss Quadrature Nodes...
laguerreGQNodes(:,1) = laguerreGQNodes(:,1) ./ scalF;

% Plotting Laguerre Gauss Quadrature...
if(ik==1); plotLaguerreGaussQuadrature([8;16;24]); end

% Laguerre Polynomials and derivatives...
laguerrePol = makeLaguerrePol(order,laguerreGQNodes);
[laguerrePol1,laguerrePol2] = ...
    makeLaguerrePolDerivs(laguerrePol,laguerreGQNodes);

% Laguerre Function and derivatives...
laguerreFunc = makeLaguerreFunc(laguerrePol,laguerreGQNodes);
[laguerreFunc1,laguerreFunc2] = makeLaguerreFuncDerivs ... 
    (laguerrePol,laguerrePol1,laguerrePol2,laguerreGQNodes);

% Laguerre Gauss Quadrature Weights...
laguerreGQWeights = makeLaguerreGQWeights(order,laguerreFunc);

% Transformed Laguerre Functions and derivat%% PROBLEMS:
% -- Scaling of the polynomial to get more points in the BL...
transLaguerreFunc = makeTransformedLaguerreFunc(laguerreFunc);
[transLaguerreFunc1,transLaguerreFunc2] = makeTransLaguerreDeriv ... 
    (laguerreFunc1,laguerreFunc2);

% Linear Base Velocity Profile...
linearBaseVelocity = makeLinearBaseVelocity(laguerreGQNodes);

% Parabolic Base Velocity Profile...
parabolicBaseVelocity = makeParabolicBaseVelocity(laguerreGQNodes);

% Blasius Base Velocity Profile...
blasiusBaseVelocity = makeBlasiusBaseVelocity(laguerreGQNodes);

% Plotting Base Velocity Profiles...
if(ik==1); plotBaseVelProfiles(0:0.001:2,3); end

% Orr-Sommerfeld Operator (linear base profile)...
linearSol(iRe,ik) = orrSommerfeldOperator ( k,Re,...
    linearBaseVelocity(:,1),linearBaseVelocity(:,2),laguerreGQWeights,...
    transLaguerreFunc,transLaguerreFunc1,transLaguerreFunc2,noslip );

% Orr-Sommerfeld Operator (parabolic base profile)...
parabolicSol(iRe,ik) = orrSommerfeldOperator ( k,Re,...
    parabolicBaseVelocity(:,1),parabolicBaseVelocity(:,2),...
    laguerreGQWeights,transLaguerreFunc,transLaguerreFunc1,...
    transLaguerreFunc2,noslip );

% Orr-Sommerfeld Operator (Blasius base profile)...
blasiusSol(iRe,ik) = orrSommerfeldOperator ( k,Re,...
    blasiusBaseVelocity(:,1),blasiusBaseVelocity(:,2),...
    laguerreGQWeights,transLaguerreFunc,transLaguerreFunc1,...
    transLaguerreFunc2,noslip );

% Clearing variables...
clearvars laguerreGQNodes laguerrePol laguerrePol1 laguerrePol2 ...
   laguerreFunc laguerreFunc1 laguerreFunc2 transLaguerreFunc ...
   transLaguerreFunc1 transLaguerreFunc2 linearBaseVelocity ...
   parabolicBaseVelocity blasiusBaseVelocity laguerreGQWeights k Re ...
   scalF order;

plotEigenValues(linearSol(iRe,ik),parabolicSol(iRe,ik),blasiusSol(iRe,ik));

% Incompressible Channel Flow... (using Chebyshev basis)
%--------------------------------------------------------------------------
elseif( testCase == 2 )
    
% Chebyshev Quadrature Nodes...
chebyGQNodes = makeChebyGQNodes(order);

% Scaling the Chebyshev-Gauss Quadrature Nodes...
chebyGQNodes(:,1) = chebyGQNodes(:,1) ./ scalF;

% Making the Chebyshev Polynomial basis...
chebyPol = makeChebyPol(order,chebyGQNodes);

% Plotting Chebyshev Gauss Quadrature...
plotChebyGaussQuadrature([8;16;24]);

% Making derivatives of Chebyshev basis....
[chebyPol1,chebyPol2] = makeChebyPolDerivs(chebyPol,chebyGQNodes);

% Regular channel flow base velocity profile...
[channelBaseProfile1,yChannel] = ...
    makeChannelBaseFlow(101,0,1,1e-3,40,1.2e-3,[0,0]);

[channelBaseProfile2,yChannel] = ...
    makeChannelBaseFlow(101,0,0.5,1e-3,40,1.2e-3,[0,1]);

[channelBaseProfile3,yChannel] = ...
    makeChannelBaseFlow(101,0,123,1e-3,30,1.2e-3,[0,1]);

plotChannelFlowBaseProfiles(yChannel,channelBaseProfile1,...
    channelBaseProfile2,channelBaseProfile3);
    
end

end    
    
end
